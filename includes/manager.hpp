#pragma once
#include "defines.hpp"
#include "object.hpp"

namespace GeoFrame {
/*
 * @brief: "RawPointer" is a wrapper class for pointer.
 * @tparam: T: Type of pointer.
 * @note: This class doesn't delete pointer resource by default. If you want to
 * delete pointer resource, you should call SetDeletable(true) and call
 * Delete().
 */
template <typename S> class RawPointer : public Geobject {
private:
  bool mDeletable = false;
  S *mPointer = nullptr;

public:
  /*
   * @brief: Default constructor. Nothing to do.
   */
  RawPointer() : mPointer(nullptr) {}
  /*
   * @brief: Constructor with pointer. Instance that is generated by this
   * constructor delete pointer resource.
   * @param: args: S's constructor arguments.
   */
  template <typename... Args>
  RawPointer(Args &&...args)
      : mPointer(new S(std::forward<Args>(args)...)), mDeletable(true) {}
  /*
   * @brief: Copy and set reference to other's pointer. Instance that is
   * generated by this constructor doesn't delete pointer resource.
   * @param: other: Other RawPointer to copy from.
   */
  RawPointer(RawPointer const &other)
      : mPointer(other.mPointer), mDeletable(false) {}
  /*
   * @brief: Move reference of other's pointer. Instance that is
   * generated by this constructor delete pointer resource and other lose its
   * deletability but not lose pointer access.
   * @param: other: Other RawPointer to move from.
   */
  RawPointer(RawPointer &&other)
      : mPointer(other.mPointer), mDeletable(other.mDeletable) {
    other.mDeletable = false;
  }
  /*
   * @brief: Destructor. Nothing to do.
   */
  ~RawPointer() {}

  S *GetPointer() const { return mPointer; }

  /*
   * @brief: Set deletability of pointer.
   * @sa: Delete()
   * @param: deletable: Deletability of pointer.
   * @note: If deletability is set to true, pointer resource will be deleted
   * by calling Delete().
   */
  void SetDeletable(bool deletable) { mDeletable = deletable; }

  /*
   * @brief: Get deletability of pointer.
   * @return: Deletability of pointer.
   */
  bool IsDeletable() const { return mDeletable; }

  /*
   * @brief: Delete pointer resource if deletability is set to true.
   */
  void Delete() {
    if (mDeletable) {
      delete mPointer;
      mPointer = nullptr;
      mDeletable = false;
    }
  }

  RawPointer &operator=(RawPointer const &other) {
    delete mPointer;
    mPointer = other.mPointer;
    mDeletable = false;
    return *this;
  }
  RawPointer &operator=(RawPointer &&other) {
    delete mPointer;
    mPointer = other.mPointer;
    other.mPointer = nullptr;
    mDeletable = other.mDeletable;
    other.mDeletable = false;
    return *this;
  }
  RawPointer &operator=(S *pointer) {
    delete mPointer;
    mPointer = pointer;
    mDeletable = true;
    return *this;
  }

  S *operator->() const { return mPointer; }
  S &operator*() const { return *mPointer; }

  operator S *() const { return mPointer; }
  operator bool() const { return mPointer != nullptr; }
};
} // namespace GeoFrame
